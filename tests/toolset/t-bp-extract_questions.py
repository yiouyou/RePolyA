_txt = """在思考和完善新式茶饮商业BP的竞争态势部分时，可以考虑以下问题和角度：

1. 竞争对手分析：新式茶饮行业中的主要竞争对手是哪些？他们的商业模式和市场定位如何？他们的产品和服务有何特点？他们的优势和劣势是什么？

2. 市场份额和增长率：新式茶饮行业的市场份额如何？行业的增长率如何？有无可能出现新的竞争者或潜在威胁？

3. 消费者洞察：了解目标消费者的需求和偏好，以及他们对不同品牌和产品的态度。了解消费者对新式茶饮的认知和接受程度，以及他们对竞争对手的评价。

4. 品牌定位和差异化：新式茶饮店如何在竞争激烈的市场中建立自己的品牌定位？他们有何独特的卖点和差异化策略？如何与竞争对手区分开来？

5. 技术和创新：新式茶饮业有哪些创新的影响力或有潜力的商业模式？他们采用了哪些新技术或创新的生产方式？这些创新如何推动企业的持续增长？

6. 供应链和成本优势：了解新式茶饮业的供应链管理情况，包括原材料采购、物流和储存等方面。了解竞争对手的成本结构和效率，以及自己如何通过供应链优化和成本控制获得竞争优势。

7. 市场趋势和未来发展：了解新式茶饮行业的市场趋势和未来发展方向，包括消费者需求的变化、新兴市场的机会和挑战等。了解行业的发展动态和趋势，以及自己如何应对和把握机会。

8. 合作伙伴和渠道：了解新式茶饮业的合作伙伴关系和渠道策略，包括与供应商、分销商和合作品牌的合作关系。了解竞争对手的合作伙伴和渠道策略，以及自己如何建立和维护合作伙伴关系。

9. 市场营销和促销策略：了解新式茶饮店的市场营销和促销策略，包括广告、促销活动、社交媒体等方面。了解竞争对手的市场营销和促销策略，以及自己如何通过创新的营销手段吸引和保留客户。

10. 风险和挑战：了解新式茶饮行业面临的风险和挑战，包括政策风险、市场竞争、供应链风险等方面。了解竞争对手面临的风险和挑战，以及自己如何应对和降低风险。

通过回答这些问题和思考这些角度，您可以更全面地了解新式茶饮行业的竞争态势，并为完善商业BP提供有价值的信息和洞察。

Tokens: 2010 = (Prompt 983 + Completion 1027) Cost: $0.00353"""


_txt = """在思考和完善新式茶饮商业BP的时机部分时，可以考虑以下问题和角度：

1. 市场时机：新式茶饮市场的发展趋势如何？有无数据支持该市场的增长潜力？是否存在任何市场机会或趋势可以利用？

2. 竞争时机：新式茶饮市场中的竞争对手如何？他们的市场份额和增长趋势如何？是否存在任何竞争对手的弱点或机会可以利用？

3. 消费者时机：消费者对新式茶饮的需求和兴趣如何？他们对健康、可持续性或其他特定价值观的关注程度如何？是否存在任何消费者需求的变化或趋势可以利用？

4. 技术时机：是否存在任何新技术或创新可以改进新式茶饮的生产、制作或销售过程？是否存在任何技术趋势或突破可以利用？

5. 法律和政策时机：是否存在任何法律或政策变化可能对新式茶饮业务产生影响？是否存在任何政府支持或激励措施可以利用？

6. 社会和文化时机：社会和文化趋势对新式茶饮业务有何影响？是否存在任何社会或文化变化可以利用？

7. 经济时机：经济环境对新式茶饮业务有何影响？是否存在任何经济趋势或机会可以利用？

8. 地理时机：地理位置对新式茶饮业务有何影响？是否存在任何地理位置的优势或机会可以利用？

9. 合作伙伴时机：是否存在任何合作伙伴关系可以加强新式茶饮业务的竞争力或创新能力？是否存在任何合作伙伴关系的机会可以利用？

10. 可持续发展时机：是否存在任何可持续发展的趋势或机会可以与新式茶饮业务相结合？是否存在任何可持续发展的实践或倡议可以利用？

通过思考和回答这些问题，您可以更全面地理解新式茶饮商业BP的时机部分，并找到潜在的机会和优势。

Tokens: 1683 = (Prompt 978 + Completion 705) Cost: $0.00288"""

import re

def extract_and_split_content(text):
    pattern = r'\d+\.\s*[^：]+[：]\s*([^。？]*[。？])'
    extracted_texts = re.findall(pattern, text)
    split_lists = [re.findall(r'[^。？]*[。？]', text) for text in extracted_texts]
    flat_list = [item.strip() for sublist in split_lists for item in sublist]
    return flat_list

# Using the provided text
flattened_list = extract_and_split_content(_txt)
print(flattened_list)

